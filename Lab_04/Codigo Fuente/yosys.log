
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.48+47 (git sha1 cbb95cb51, g++ 14.2.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/home/Sebastian/.cache/yay/yosys-nightly/src=/usr/src/debug/yosys-nightly -flto=auto -fPIC -O3)

-- Parsing `LCD.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: LCD.v
Parsing Verilog input from `LCD.v' to AST representation.
Storing AST representation for module `$abstract\LCD'.
Successfully finished Verilog frontend.

-- Parsing `ticks_generator.v' using frontend ` -vlog2k' --

2. Executing Verilog-2005 frontend: ticks_generator.v
Parsing Verilog input from `ticks_generator.v' to AST representation.
Storing AST representation for module `$abstract\ticks_generator'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top LCD -json build/LCD.json' --

3. Executing SYNTH_ICE40 pass.

3.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

3.2. Executing HIERARCHY pass (managing design hierarchy).

3.3. Executing AST frontend in derive mode using pre-parsed AST for module `\LCD'.
Generating RTLIL representation for module `\LCD'.

3.3.1. Analyzing design hierarchy..
Top module:  \LCD

3.3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\ticks_generator'.
Generating RTLIL representation for module `\ticks_generator'.

3.3.3. Analyzing design hierarchy..
Top module:  \LCD
Used module:     \ticks_generator

3.3.4. Analyzing design hierarchy..
Top module:  \LCD
Used module:     \ticks_generator
Removing unused module `$abstract\ticks_generator'.
Removing unused module `$abstract\LCD'.
Removed 2 unused modules.
Warning: Resizing cell port LCD.d0.start from 32 bits to 1 bits.

3.4. Executing PROC pass (convert processes to netlists).

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1414$241 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1353$234 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1273$230 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1212$223 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1138$220 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1088$217 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1017$214 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:967$211 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:803$203 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:742$196 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:662$192 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:601$185 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:527$182 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:477$179 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:406$176 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:356$173 in module SB_DFFSR.
Marked 2 switch rules as full_case in process $proc$ticks_generator.v:33$464 in module ticks_generator.
Marked 10 switch rules as full_case in process $proc$LCD.v:41$397 in module LCD.
Removed a total of 0 dead cases.

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 8 redundant assignments.
Promoted 51 assignments to connections.

3.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$240'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$233'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$229'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$222'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$216'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$213'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$210'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$208'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$206'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$202'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$195'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$191'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$184'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$181'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$178'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$175'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$172'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$170'.
  Set init value: \Q = 1'0
Found init rule in `\LCD.$proc$LCD.v:22$447'.
  Set init value: \control = 1'0
Found init rule in `\LCD.$proc$LCD.v:21$446'.
  Set init value: \prev_ticks = 17'00000000000000000
Found init rule in `\LCD.$proc$LCD.v:19$445'.
  Set init value: \char_index = 8'00000000
Found init rule in `\LCD.$proc$LCD.v:18$444'.
  Set init value: \enable_pulse = 1'0
Found init rule in `\LCD.$proc$LCD.v:17$443'.
  Set init value: \state = 4'0000

3.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
Found async reset \R in `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
Found async reset \S in `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
Found async reset \R in `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
Found async reset \S in `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:803$203'.
Found async reset \R in `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:662$192'.
Found async reset \S in `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:527$182'.
Found async reset \R in `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:406$176'.

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~37 debug messages>

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$244'.
Creating decoders for process `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$240'.
Creating decoders for process `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$233'.
Creating decoders for process `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$229'.
Creating decoders for process `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$222'.
Creating decoders for process `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$219'.
Creating decoders for process `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$216'.
Creating decoders for process `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$213'.
Creating decoders for process `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:967$211'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$210'.
Creating decoders for process `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:922$209'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$208'.
Creating decoders for process `\SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:882$207'.
Creating decoders for process `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$206'.
Creating decoders for process `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:803$203'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$202'.
Creating decoders for process `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:742$196'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$195'.
Creating decoders for process `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:662$192'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$191'.
Creating decoders for process `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:601$185'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$184'.
Creating decoders for process `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:527$182'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$181'.
Creating decoders for process `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:477$179'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$178'.
Creating decoders for process `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:406$176'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$175'.
Creating decoders for process `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:356$173'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$172'.
Creating decoders for process `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:311$171'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$170'.
Creating decoders for process `\SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:271$169'.
Creating decoders for process `\ticks_generator.$proc$ticks_generator.v:33$464'.
     1/3: $0\ticks_counter[16:0]
     2/3: $0\counter[14:0]
     3/3: $0\ticks[16:0]
Creating decoders for process `\LCD.$proc$LCD.v:0$448'.
Creating decoders for process `\LCD.$proc$LCD.v:22$447'.
Creating decoders for process `\LCD.$proc$LCD.v:21$446'.
Creating decoders for process `\LCD.$proc$LCD.v:19$445'.
Creating decoders for process `\LCD.$proc$LCD.v:18$444'.
Creating decoders for process `\LCD.$proc$LCD.v:17$443'.
Creating decoders for process `\LCD.$proc$LCD.v:185$427'.
Creating decoders for process `\LCD.$proc$LCD.v:180$426'.
Creating decoders for process `\LCD.$proc$LCD.v:41$397'.
     1/7: $0\control[0:0]
     2/7: $0\prev_ticks[16:0]
     3/7: $0\char_index[7:0]
     4/7: $0\enable_pulse[0:0]
     5/7: $0\state[3:0]
     6/7: $0\DB[7:0]
     7/7: $0\RS[0:0]

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:35$381_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:35$382_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:35$383_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:35$384_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:35$385_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:36$386_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:36$387_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:36$388_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:36$389_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:36$390_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:37$391_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:37$392_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:37$393_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:37$394_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.$memwr$\message$LCD.v:37$395_EN' from process `\LCD.$proc$LCD.v:0$448'.
No latch inferred for signal `\LCD.\D0' from process `\LCD.$proc$LCD.v:185$427'.
No latch inferred for signal `\LCD.\D1' from process `\LCD.$proc$LCD.v:185$427'.
No latch inferred for signal `\LCD.\D2' from process `\LCD.$proc$LCD.v:185$427'.
No latch inferred for signal `\LCD.\D3' from process `\LCD.$proc$LCD.v:185$427'.
No latch inferred for signal `\LCD.\D4' from process `\LCD.$proc$LCD.v:185$427'.
No latch inferred for signal `\LCD.\D5' from process `\LCD.$proc$LCD.v:185$427'.
No latch inferred for signal `\LCD.\D6' from process `\LCD.$proc$LCD.v:185$427'.
No latch inferred for signal `\LCD.\D7' from process `\LCD.$proc$LCD.v:185$427'.

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
  created $adff cell `$procdff$779' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
  created $dff cell `$procdff$780' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
  created $adff cell `$procdff$783' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
  created $dff cell `$procdff$784' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
  created $adff cell `$procdff$787' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
  created $dff cell `$procdff$788' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
  created $adff cell `$procdff$791' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:967$211'.
  created $dff cell `$procdff$792' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:922$209'.
  created $dff cell `$procdff$793' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:882$207'.
  created $dff cell `$procdff$794' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:803$203'.
  created $adff cell `$procdff$797' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:742$196'.
  created $dff cell `$procdff$798' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:662$192'.
  created $adff cell `$procdff$801' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:601$185'.
  created $dff cell `$procdff$802' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:527$182'.
  created $adff cell `$procdff$805' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:477$179'.
  created $dff cell `$procdff$806' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:406$176'.
  created $adff cell `$procdff$809' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:356$173'.
  created $dff cell `$procdff$810' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:311$171'.
  created $dff cell `$procdff$811' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:271$169'.
  created $dff cell `$procdff$812' with positive edge clock.
Creating register for signal `\ticks_generator.\ticks' using process `\ticks_generator.$proc$ticks_generator.v:33$464'.
  created $dff cell `$procdff$813' with positive edge clock.
Creating register for signal `\ticks_generator.\counter' using process `\ticks_generator.$proc$ticks_generator.v:33$464'.
  created $dff cell `$procdff$814' with positive edge clock.
Creating register for signal `\ticks_generator.\ticks_counter' using process `\ticks_generator.$proc$ticks_generator.v:33$464'.
  created $dff cell `$procdff$815' with positive edge clock.
Creating register for signal `\LCD.\E' using process `\LCD.$proc$LCD.v:180$426'.
  created $dff cell `$procdff$816' with positive edge clock.
Creating register for signal `\LCD.\RS' using process `\LCD.$proc$LCD.v:41$397'.
  created $dff cell `$procdff$817' with positive edge clock.
Creating register for signal `\LCD.\DB' using process `\LCD.$proc$LCD.v:41$397'.
  created $dff cell `$procdff$818' with positive edge clock.
Creating register for signal `\LCD.\state' using process `\LCD.$proc$LCD.v:41$397'.
  created $dff cell `$procdff$819' with positive edge clock.
Creating register for signal `\LCD.\enable_pulse' using process `\LCD.$proc$LCD.v:41$397'.
  created $dff cell `$procdff$820' with positive edge clock.
Creating register for signal `\LCD.\char_index' using process `\LCD.$proc$LCD.v:41$397'.
  created $dff cell `$procdff$821' with positive edge clock.
Creating register for signal `\LCD.\prev_ticks' using process `\LCD.$proc$LCD.v:41$397'.
  created $dff cell `$procdff$822' with positive edge clock.
Creating register for signal `\LCD.\control' using process `\LCD.$proc$LCD.v:41$397'.
  created $dff cell `$procdff$823' with positive edge clock.

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$244'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$240'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$233'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$229'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$222'.
Removing empty process `SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
Removing empty process `SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$219'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$216'.
Removing empty process `SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
Removing empty process `SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$213'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$210'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$208'.
Removing empty process `SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:882$207'.
Removing empty process `SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$206'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$202'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$195'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$191'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$184'.
Removing empty process `SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:527$182'.
Removing empty process `SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$181'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$178'.
Removing empty process `SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:406$176'.
Removing empty process `SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$175'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$172'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$170'.
Removing empty process `SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:271$169'.
Found and cleaned up 4 empty switches in `\ticks_generator.$proc$ticks_generator.v:33$464'.
Removing empty process `ticks_generator.$proc$ticks_generator.v:33$464'.
Removing empty process `LCD.$proc$LCD.v:0$448'.
Removing empty process `LCD.$proc$LCD.v:22$447'.
Removing empty process `LCD.$proc$LCD.v:21$446'.
Removing empty process `LCD.$proc$LCD.v:19$445'.
Removing empty process `LCD.$proc$LCD.v:18$444'.
Removing empty process `LCD.$proc$LCD.v:17$443'.
Removing empty process `LCD.$proc$LCD.v:185$427'.
Removing empty process `LCD.$proc$LCD.v:180$426'.
Found and cleaned up 15 empty switches in `\LCD.$proc$LCD.v:41$397'.
Removing empty process `LCD.$proc$LCD.v:41$397'.
Cleaned up 37 empty switches.

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module ticks_generator.
<suppressed ~3 debug messages>
Optimizing module LCD.
<suppressed ~68 debug messages>

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module ticks_generator.
<suppressed ~1 debug messages>

3.6. Executing TRIBUF pass.

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.
<suppressed ~7 debug messages>

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..
Removed 10 unused cells and 145 unused wires.
<suppressed ~11 debug messages>

3.10. Executing CHECK pass (checking for obvious problems).
Checking module LCD...
Found and reported 0 problems.

3.11. Executing OPT pass (performing simple optimizations).

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
<suppressed ~162 debug messages>
Removed a total of 54 cells.

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LCD..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LCD.
Performed a total of 0 changes.

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
<suppressed ~108 debug messages>
Removed a total of 36 cells.

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..
Removed 0 unused cells and 90 unused wires.
<suppressed ~1 debug messages>

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LCD..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LCD.
    New ctrl vector for $pmux cell $procmux$542: $auto$opt_reduce.cc:137:opt_pmux$826
    New ctrl vector for $pmux cell $procmux$587: $auto$opt_reduce.cc:137:opt_pmux$828
    New ctrl vector for $pmux cell $procmux$602: $auto$opt_reduce.cc:137:opt_pmux$830
    New ctrl vector for $pmux cell $procmux$647: { $procmux$559_CMP $procmux$551_CMP $auto$opt_reduce.cc:137:opt_pmux$832 $procmux$543_CMP }
    New ctrl vector for $pmux cell $procmux$694: { $procmux$579_CMP $procmux$575_CMP $procmux$571_CMP $procmux$567_CMP $procmux$563_CMP $procmux$555_CMP $procmux$547_CMP $auto$opt_reduce.cc:137:opt_pmux$834 }
    New ctrl vector for $pmux cell $procmux$737: { $auto$opt_reduce.cc:137:opt_pmux$838 $auto$opt_reduce.cc:137:opt_pmux$836 }
  Optimizing cells in module \LCD.
Performed a total of 6 changes.

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.11.16. Rerunning OPT passes. (Maybe there is more to do..)

3.11.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LCD..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.11.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LCD.
Performed a total of 0 changes.

3.11.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.11.20. Executing OPT_DFF pass (perform DFF optimizations).

3.11.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..

3.11.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.11.23. Finished OPT passes. (There is nothing left to do.)

3.12. Executing FSM pass (extract and optimize FSM).

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LCD..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LCD.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$823 ($dff) from module LCD (D = $procmux$540_Y, Q = \control).
Adding EN signal on $procdff$822 ($dff) from module LCD (D = \d0.ticks, Q = \prev_ticks).
Adding EN signal on $procdff$821 ($dff) from module LCD (D = $add$LCD.v:111$411_Y [7:0], Q = \char_index).
Adding EN signal on $procdff$820 ($dff) from module LCD (D = $procmux$600_Y, Q = \enable_pulse).
Adding EN signal on $procdff$819 ($dff) from module LCD (D = $procmux$647_Y, Q = \state).
Adding EN signal on $procdff$818 ($dff) from module LCD (D = $procmux$694_Y, Q = \DB).
Adding EN signal on $procdff$817 ($dff) from module LCD (D = $procmux$737_Y, Q = \RS).
Adding EN signal on $flatten\d0.$procdff$815 ($dff) from module LCD (D = $flatten\d0.$add$ticks_generator.v:40$467_Y [16:0], Q = \d0.ticks_counter).
Adding EN signal on $flatten\d0.$procdff$814 ($dff) from module LCD (D = $flatten\d0.$procmux$528_Y, Q = \d0.counter).
Adding SRST signal on $auto$ff.cc:266:slice$903 ($dffe) from module LCD (D = $flatten\d0.$add$ticks_generator.v:42$468_Y [14:0], Q = \d0.counter, rval = 15'000000000000000).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..
Removed 15 unused cells and 15 unused wires.
<suppressed ~16 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.
<suppressed ~3 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LCD..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LCD.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LCD..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LCD.
Performed a total of 0 changes.

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.13.23. Finished OPT passes. (There is nothing left to do.)

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:35$428 (message).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:35$429 (message).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:35$430 (message).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:35$431 (message).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:35$432 (message).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:36$433 (message).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:36$434 (message).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:36$435 (message).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:36$436 (message).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:36$437 (message).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:37$438 (message).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:37$439 (message).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:37$440 (message).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:37$441 (message).
Removed top 28 address bits (of 32) from memory init port LCD.$meminit$\message$LCD.v:37$442 (message).
Removed top 4 address bits (of 8) from memory read port LCD.$memrd$\message$LCD.v:110$410 (message).
Removed top 31 bits (of 32) from port B of cell LCD.$add$LCD.v:102$408 ($add).
Removed top 28 bits (of 32) from port Y of cell LCD.$add$LCD.v:102$408 ($add).
Removed top 31 bits (of 32) from port B of cell LCD.$add$LCD.v:111$411 ($add).
Removed top 24 bits (of 32) from port Y of cell LCD.$add$LCD.v:111$411 ($add).
Removed top 5 bits (of 8) from port B of cell LCD.$eq$LCD.v:115$412 ($eq).
Removed top 4 bits (of 8) from port B of cell LCD.$eq$LCD.v:142$419 ($eq).
Removed top 4 bits (of 8) from port B of cell LCD.$eq$LCD.v:169$425 ($eq).
Removed top 1 bits (of 4) from port B of cell LCD.$procmux$551_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell LCD.$procmux$555_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell LCD.$procmux$559_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell LCD.$procmux$563_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell LCD.$procmux$567_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell LCD.$procmux$571_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell LCD.$procmux$575_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell LCD.$flatten\d0.$add$ticks_generator.v:42$468 ($add).
Removed top 17 bits (of 32) from port Y of cell LCD.$flatten\d0.$add$ticks_generator.v:42$468 ($add).
Removed top 31 bits (of 32) from port B of cell LCD.$flatten\d0.$add$ticks_generator.v:40$467 ($add).
Removed top 15 bits (of 32) from port Y of cell LCD.$flatten\d0.$add$ticks_generator.v:40$467 ($add).
Removed top 15 bits (of 32) from port B of cell LCD.$flatten\d0.$lt$ticks_generator.v:37$465 ($lt).
Removed top 28 bits (of 32) from wire LCD.$add$LCD.v:102$408_Y.
Removed top 15 bits (of 32) from wire LCD.$flatten\d0.$add$ticks_generator.v:40$467_Y.
Removed top 17 bits (of 32) from wire LCD.$flatten\d0.$add$ticks_generator.v:42$468_Y.

3.15. Executing PEEPOPT pass (run peephole optimizers).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.17. Executing SHARE pass (SAT-based resource sharing).

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

3.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..

3.21. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module LCD:
  creating $macc model for $add$LCD.v:102$408 ($add).
  creating $macc model for $add$LCD.v:111$411 ($add).
  creating $macc model for $flatten\d0.$add$ticks_generator.v:40$467 ($add).
  creating $macc model for $flatten\d0.$add$ticks_generator.v:42$468 ($add).
  creating $alu model for $macc $flatten\d0.$add$ticks_generator.v:42$468.
  creating $alu model for $macc $flatten\d0.$add$ticks_generator.v:40$467.
  creating $alu model for $macc $add$LCD.v:111$411.
  creating $alu model for $macc $add$LCD.v:102$408.
  creating $alu model for $flatten\d0.$lt$ticks_generator.v:37$465 ($lt): new $alu
  creating $alu cell for $flatten\d0.$lt$ticks_generator.v:37$465: $auto$alumacc.cc:485:replace_alu$910
  creating $alu cell for $add$LCD.v:102$408: $auto$alumacc.cc:485:replace_alu$915
  creating $alu cell for $add$LCD.v:111$411: $auto$alumacc.cc:485:replace_alu$918
  creating $alu cell for $flatten\d0.$add$ticks_generator.v:40$467: $auto$alumacc.cc:485:replace_alu$921
  creating $alu cell for $flatten\d0.$add$ticks_generator.v:42$468: $auto$alumacc.cc:485:replace_alu$924
  created 5 $alu and 0 $macc cells.

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.
<suppressed ~1 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LCD..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LCD.
Performed a total of 0 changes.

3.22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.22.6. Executing OPT_DFF pass (perform DFF optimizations).

3.22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.22.9. Rerunning OPT passes. (Maybe there is more to do..)

3.22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LCD..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LCD.
Performed a total of 0 changes.

3.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.22.13. Executing OPT_DFF pass (perform DFF optimizations).

3.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..

3.22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.22.16. Finished OPT passes. (There is nothing left to do.)

3.23. Executing MEMORY pass.

3.23.1. Executing OPT_MEM pass (optimize memories).
LCD.message: removing const-0 lane 7
Performed a total of 1 transformations.

3.23.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.23.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.23.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.23.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\message'[0] in module `\LCD': no output FF found.
Checking read port address `\message'[0] in module `\LCD': address FF has fully-defined init value, not supported.

3.23.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..

3.23.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.23.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..

3.23.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..

3.25. Executing MEMORY_LIBMAP pass (mapping memories to cells).
using FF mapping for memory LCD.message
<suppressed ~14 debug messages>

3.26. Executing TECHMAP pass (map to technology primitives).

3.26.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

3.26.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

3.26.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.27. Executing ICE40_BRAMINIT pass.

3.28. Executing OPT pass (performing simple optimizations).

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.
<suppressed ~22 debug messages>

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..
Removed 8 unused cells and 26 unused wires.
<suppressed ~9 debug messages>

3.28.5. Finished fast OPT passes.

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \message in module \LCD:
  created 15 $dff cells and 0 static cells of width 7.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.

3.30. Executing OPT pass (performing simple optimizations).

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.
<suppressed ~1 debug messages>

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LCD..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LCD.
    Consolidated identical input bits for $mux cell $memory\message$rdmux[0][3][6]$1004:
      Old ports: A=7'1100011, B=7'1110010, Y=$memory\message$rdmux[0][2][3]$a$984
      New ports: A=2'01, B=2'10, Y={ $memory\message$rdmux[0][2][3]$a$984 [4] $memory\message$rdmux[0][2][3]$a$984 [0] }
      New connections: { $memory\message$rdmux[0][2][3]$a$984 [6:5] $memory\message$rdmux[0][2][3]$a$984 [3:1] } = 5'11001
    Consolidated identical input bits for $mux cell $memory\message$rdmux[0][3][5]$1001:
      Old ports: A=7'1000100, B=7'1100101, Y=$memory\message$rdmux[0][2][2]$b$982
      New ports: A=1'0, B=1'1, Y=$memory\message$rdmux[0][2][2]$b$982 [0]
      New connections: $memory\message$rdmux[0][2][2]$b$982 [6:1] = { 1'1 $memory\message$rdmux[0][2][2]$b$982 [0] 4'0010 }
    Consolidated identical input bits for $mux cell $memory\message$rdmux[0][3][4]$998:
      Old ports: A=7'1110010, B=7'0111010, Y=$memory\message$rdmux[0][2][2]$a$981
      New ports: A=2'10, B=2'01, Y={ $memory\message$rdmux[0][2][2]$a$981 [6] $memory\message$rdmux[0][2][2]$a$981 [3] }
      New connections: { $memory\message$rdmux[0][2][2]$a$981 [5:4] $memory\message$rdmux[0][2][2]$a$981 [2:0] } = 5'11010
    Consolidated identical input bits for $mux cell $memory\message$rdmux[0][3][3]$995:
      Old ports: A=7'1101110, B=7'1100011, Y=$memory\message$rdmux[0][2][1]$b$979
      New ports: A=2'10, B=2'01, Y={ $memory\message$rdmux[0][2][1]$b$979 [2] $memory\message$rdmux[0][2][1]$b$979 [0] }
      New connections: { $memory\message$rdmux[0][2][1]$b$979 [6:3] $memory\message$rdmux[0][2][1]$b$979 [1] } = { 3'110 $memory\message$rdmux[0][2][1]$b$979 [2] 1'1 }
    Consolidated identical input bits for $mux cell $memory\message$rdmux[0][3][2]$992:
      Old ports: A=7'0111010, B=7'1000101, Y=$memory\message$rdmux[0][2][1]$a$978
      New ports: A=2'10, B=2'01, Y=$memory\message$rdmux[0][2][1]$a$978 [1:0]
      New connections: $memory\message$rdmux[0][2][1]$a$978 [6:2] = { $memory\message$rdmux[0][2][1]$a$978 [0] $memory\message$rdmux[0][2][1]$a$978 [1] $memory\message$rdmux[0][2][1]$a$978 [1] $memory\message$rdmux[0][2][1]$a$978 [1:0] }
    Consolidated identical input bits for $mux cell $memory\message$rdmux[0][3][1]$989:
      Old ports: A=7'1110011, B=7'1100101, Y=$memory\message$rdmux[0][2][0]$b$976
      New ports: A=2'01, B=2'10, Y=$memory\message$rdmux[0][2][0]$b$976 [2:1]
      New connections: { $memory\message$rdmux[0][2][0]$b$976 [6:3] $memory\message$rdmux[0][2][0]$b$976 [0] } = { 2'11 $memory\message$rdmux[0][2][0]$b$976 [1] 2'01 }
    Consolidated identical input bits for $mux cell $memory\message$rdmux[0][3][0]$986:
      Old ports: A=7'1000010, B=7'1100001, Y=$memory\message$rdmux[0][2][0]$a$975
      New ports: A=2'10, B=2'01, Y=$memory\message$rdmux[0][2][0]$a$975 [1:0]
      New connections: $memory\message$rdmux[0][2][0]$a$975 [6:2] = { 1'1 $memory\message$rdmux[0][2][0]$a$975 [0] 3'000 }
    New ctrl vector for $pmux cell $procmux$647: { $procmux$551_CMP $procmux$543_CMP }
    Consolidated identical input bits for $mux cell $memory\message$rdmux[0][3][7]$1007:
      Old ports: A=7'0111010, B=7'x, Y=$memory\message$rdmux[0][2][3]$b$985
      New ports: A=2'10, B=2'x, Y=$memory\message$rdmux[0][2][3]$b$985 [1:0]
      New connections: $memory\message$rdmux[0][2][3]$b$985 [6:2] = { $memory\message$rdmux[0][2][3]$b$985 [0] $memory\message$rdmux[0][2][3]$b$985 [1] $memory\message$rdmux[0][2][3]$b$985 [1] $memory\message$rdmux[0][2][3]$b$985 [1:0] }
  Optimizing cells in module \LCD.
    Consolidated identical input bits for $mux cell $memory\message$rdmux[0][2][3]$983:
      Old ports: A=$memory\message$rdmux[0][2][3]$a$984, B=$memory\message$rdmux[0][2][3]$b$985, Y=$memory\message$rdmux[0][1][1]$b$973
      New ports: A={ 1'1 $memory\message$rdmux[0][2][3]$a$984 [4] 3'001 $memory\message$rdmux[0][2][3]$a$984 [0] }, B={ $memory\message$rdmux[0][2][3]$b$985 [0] $memory\message$rdmux[0][2][3]$b$985 [1] $memory\message$rdmux[0][2][3]$b$985 [1:0] $memory\message$rdmux[0][2][3]$b$985 [1:0] }, Y={ $memory\message$rdmux[0][1][1]$b$973 [6] $memory\message$rdmux[0][1][1]$b$973 [4:0] }
      New connections: $memory\message$rdmux[0][1][1]$b$973 [5] = $memory\message$rdmux[0][1][1]$b$973 [1]
    Consolidated identical input bits for $mux cell $memory\message$rdmux[0][2][2]$980:
      Old ports: A=$memory\message$rdmux[0][2][2]$a$981, B=$memory\message$rdmux[0][2][2]$b$982, Y=$memory\message$rdmux[0][1][1]$a$972
      New ports: A={ $memory\message$rdmux[0][2][2]$a$981 [6] 1'1 $memory\message$rdmux[0][2][2]$a$981 [3] 3'010 }, B={ 1'1 $memory\message$rdmux[0][2][2]$b$982 [0] 3'010 $memory\message$rdmux[0][2][2]$b$982 [0] }, Y={ $memory\message$rdmux[0][1][1]$a$972 [6:5] $memory\message$rdmux[0][1][1]$a$972 [3:0] }
      New connections: $memory\message$rdmux[0][1][1]$a$972 [4] = $memory\message$rdmux[0][1][1]$a$972 [1]
    Consolidated identical input bits for $mux cell $memory\message$rdmux[0][2][1]$977:
      Old ports: A=$memory\message$rdmux[0][2][1]$a$978, B=$memory\message$rdmux[0][2][1]$b$979, Y=$memory\message$rdmux[0][1][0]$b$970
      New ports: A={ $memory\message$rdmux[0][2][1]$a$978 [0] $memory\message$rdmux[0][2][1]$a$978 [1] $memory\message$rdmux[0][2][1]$a$978 [1:0] $memory\message$rdmux[0][2][1]$a$978 [1:0] }, B={ 2'10 $memory\message$rdmux[0][2][1]$b$979 [2] $memory\message$rdmux[0][2][1]$b$979 [2] 1'1 $memory\message$rdmux[0][2][1]$b$979 [0] }, Y={ $memory\message$rdmux[0][1][0]$b$970 [6] $memory\message$rdmux[0][1][0]$b$970 [4:0] }
      New connections: $memory\message$rdmux[0][1][0]$b$970 [5] = $memory\message$rdmux[0][1][0]$b$970 [1]
    Consolidated identical input bits for $mux cell $memory\message$rdmux[0][2][0]$974:
      Old ports: A=$memory\message$rdmux[0][2][0]$a$975, B=$memory\message$rdmux[0][2][0]$b$976, Y=$memory\message$rdmux[0][1][0]$a$969
      New ports: A={ 2'00 $memory\message$rdmux[0][2][0]$a$975 [1:0] }, B={ $memory\message$rdmux[0][2][0]$b$976 [1] $memory\message$rdmux[0][2][0]$b$976 [2:1] 1'1 }, Y={ $memory\message$rdmux[0][1][0]$a$969 [4] $memory\message$rdmux[0][1][0]$a$969 [2:0] }
      New connections: { $memory\message$rdmux[0][1][0]$a$969 [6:5] $memory\message$rdmux[0][1][0]$a$969 [3] } = { 1'1 $memory\message$rdmux[0][1][0]$a$969 [0] 1'0 }
  Optimizing cells in module \LCD.
Performed a total of 13 changes.

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.30.6. Executing OPT_DFF pass (perform DFF optimizations).

3.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

3.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.30.9. Rerunning OPT passes. (Maybe there is more to do..)

3.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LCD..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

3.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LCD.
    Consolidated identical input bits for $mux cell $memory\message$rdmux[0][2][1]$977:
      Old ports: A={ $memory\message$rdmux[0][2][0]$a$975 [5] $memory\message$rdmux[0][2][0]$a$975 [1] $memory\message$rdmux[0][2][0]$a$975 [1] $memory\message$rdmux[0][2][0]$a$975 [5] $memory\message$rdmux[0][2][0]$a$975 [1] $memory\message$rdmux[0][2][0]$a$975 [5] }, B={ 2'10 $memory\message$rdmux[0][2][0]$a$975 [1] $memory\message$rdmux[0][2][0]$a$975 [1] 1'1 $memory\message$rdmux[0][2][0]$a$975 [5] }, Y={ $memory\message$rdmux[0][1][0]$b$970 [6] $memory\message$rdmux[0][1][0]$b$970 [4:2] $memory\message$rdmux[0][1][0]$b$970 [5] $memory\message$rdmux[0][1][0]$b$970 [0] }
      New ports: A={ $memory\message$rdmux[0][2][0]$a$975 [5] $memory\message$rdmux[0][2][0]$a$975 [1] $memory\message$rdmux[0][2][0]$a$975 [5] $memory\message$rdmux[0][2][0]$a$975 [1] }, B={ 2'10 $memory\message$rdmux[0][2][0]$a$975 [1] 1'1 }, Y={ $memory\message$rdmux[0][1][0]$b$970 [6] $memory\message$rdmux[0][1][0]$b$970 [4] $memory\message$rdmux[0][1][0]$b$970 [2] $memory\message$rdmux[0][1][0]$b$970 [5] }
      New connections: { $memory\message$rdmux[0][1][0]$b$970 [3] $memory\message$rdmux[0][1][0]$b$970 [0] } = { $memory\message$rdmux[0][2][0]$a$975 [1] $memory\message$rdmux[0][2][0]$a$975 [5] }
  Optimizing cells in module \LCD.
Performed a total of 1 changes.

3.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.30.13. Executing OPT_DFF pass (perform DFF optimizations).

3.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.30.16. Rerunning OPT passes. (Maybe there is more to do..)

3.30.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LCD..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

3.30.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LCD.
Performed a total of 0 changes.

3.30.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.30.20. Executing OPT_DFF pass (perform DFF optimizations).

3.30.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..

3.30.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.30.23. Finished OPT passes. (There is nothing left to do.)

3.31. Executing ICE40_WRAPCARRY pass (wrap carries).

3.32. Executing TECHMAP pass (map to technology primitives).

3.32.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.32.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

3.32.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$d2fa05d38998afabc6d4f34471305d0af4b8b2df\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_80_ice40_alu for cells of type $alu.
Using template $paramod$18205a5da979f93ffab44671dcc4a48cf14e25e2\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_80_ice40_alu for cells of type $alu.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using template $paramod$d7387fdb214042e5ef2d69a3f74948694b4bb65e\_90_pmux for cells of type $pmux.
Using template $paramod$3b7577489eb4433b1d5620cab7f3794743dee5ea\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~320 debug messages>

3.33. Executing OPT pass (performing simple optimizations).

3.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.
<suppressed ~357 debug messages>

3.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
<suppressed ~252 debug messages>
Removed a total of 84 cells.

3.33.3. Executing OPT_DFF pass (perform DFF optimizations).

3.33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..
Removed 30 unused cells and 290 unused wires.
<suppressed ~31 debug messages>

3.33.5. Finished fast OPT passes.

3.34. Executing ICE40_OPT pass (performing simple optimizations).

3.34.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) LCD.$auto$alumacc.cc:485:replace_alu$910.slice[0].carry: CO=\d0.ticks_counter [8]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) LCD.$auto$alumacc.cc:485:replace_alu$915.slice[0].carry: CO=\state [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) LCD.$auto$alumacc.cc:485:replace_alu$918.slice[0].carry: CO=\char_index [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) LCD.$auto$alumacc.cc:485:replace_alu$921.slice[0].carry: CO=\d0.ticks_counter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) LCD.$auto$alumacc.cc:485:replace_alu$924.slice[0].carry: CO=\d0.counter [0]

3.34.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.
<suppressed ~6 debug messages>

3.34.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

3.34.4. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$1697 ($_DFFE_PP_) from module LCD (D = $auto$alumacc.cc:485:replace_alu$915.Y [2], Q = \state [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1695 ($_DFFE_PP_) from module LCD (D = $auto$alumacc.cc:485:replace_alu$915.Y [0], Q = \state [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1694 ($_DFFE_PP_) from module LCD (D = $procmux$694.Y_B [7], Q = \DB [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1693 ($_DFFE_PP_) from module LCD (D = $procmux$694.Y_B [6], Q = \DB [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1692 ($_DFFE_PP_) from module LCD (D = $procmux$694.B_AND_S [5], Q = \DB [5], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$1691 ($_DFFE_PP_) from module LCD (D = $procmux$694.Y_B [4], Q = \DB [4], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$1690 ($_DFFE_PP_) from module LCD (D = $procmux$694.Y_B [3], Q = \DB [3], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$1689 ($_DFFE_PP_) from module LCD (D = $procmux$694.Y_B [2], Q = \DB [2], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$1688 ($_DFFE_PP_) from module LCD (D = $procmux$694.Y_B [1], Q = \DB [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1687 ($_DFFE_PP_) from module LCD (D = $procmux$694.Y_B [0], Q = \DB [0], rval = 1'0).

3.34.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..
Removed 11 unused cells and 3 unused wires.
<suppressed ~12 debug messages>

3.34.6. Rerunning OPT passes. (Removed registers in this run.)

3.34.7. Running ICE40 specific optimizations.

3.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.34.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.34.10. Executing OPT_DFF pass (perform DFF optimizations).

3.34.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..

3.34.12. Finished OPT passes. (There is nothing left to do.)

3.35. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

3.36. Executing TECHMAP pass (map to technology primitives).

3.36.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.36.2. Continuing TECHMAP pass.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_SDFFCE_PP1P_ for cells of type $_SDFFCE_PP1P_.
No more expansions possible.
<suppressed ~112 debug messages>

3.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping LCD.$auto$alumacc.cc:485:replace_alu$915.slice[0].carry ($lut).
Mapping LCD.$auto$alumacc.cc:485:replace_alu$918.slice[0].carry ($lut).
Mapping LCD.$auto$alumacc.cc:485:replace_alu$921.slice[0].carry ($lut).
Mapping LCD.$auto$alumacc.cc:485:replace_alu$924.slice[0].carry ($lut).

3.39. Executing ICE40_OPT pass (performing simple optimizations).

3.39.1. Running ICE40 specific optimizations.

3.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.
<suppressed ~63 debug messages>

3.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
<suppressed ~120 debug messages>
Removed a total of 40 cells.

3.39.4. Executing OPT_DFF pass (perform DFF optimizations).

3.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..
Removed 0 unused cells and 510 unused wires.
<suppressed ~1 debug messages>

3.39.6. Rerunning OPT passes. (Removed registers in this run.)

3.39.7. Running ICE40 specific optimizations.

3.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.39.10. Executing OPT_DFF pass (perform DFF optimizations).

3.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..

3.39.12. Finished OPT passes. (There is nothing left to do.)

3.40. Executing TECHMAP pass (map to technology primitives).

3.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

3.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.41. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/abc9_model.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ICE40_CARRY_WRAPPER'.
Successfully finished Verilog frontend.

3.42. Executing ABC9 pass.

3.42.1. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.2. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.3. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module LCD.
Found 0 SCCs.

3.42.4. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.5. Executing PROC pass (convert processes to netlists).

3.42.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.42.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.42.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.42.5.4. Executing PROC_INIT pass (extract init attributes).

3.42.5.5. Executing PROC_ARST pass (detect async resets in processes).

3.42.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.42.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.42.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.42.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.42.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.42.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.42.5.12. Executing OPT_EXPR pass (perform const folding).

3.42.6. Executing TECHMAP pass (map to technology primitives).

3.42.6.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.42.6.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~126 debug messages>

3.42.7. Executing OPT pass (performing simple optimizations).

3.42.7.1. Executing OPT_EXPR pass (perform const folding).

3.42.7.2. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

3.42.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Removed 0 multiplexer ports.

3.42.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Performed a total of 0 changes.

3.42.7.5. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

3.42.7.6. Executing OPT_DFF pass (perform DFF optimizations).

3.42.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).

3.42.7.8. Executing OPT_EXPR pass (perform const folding).

3.42.7.9. Finished OPT passes. (There is nothing left to do.)

3.42.8. Executing TECHMAP pass (map to technology primitives).

3.42.8.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/abc9_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/abc9_map.v' to AST representation.
Successfully finished Verilog frontend.

3.42.8.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~2 debug messages>

3.42.9. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/abc9_model.v
Parsing Verilog input from `/usr/bin/../share/yosys/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ABC9_DELAY'.
Generating RTLIL representation for module `$__ABC9_SCC_BREAKER'.
Generating RTLIL representation for module `$__DFF_N__$abc9_flop'.
Generating RTLIL representation for module `$__DFF_P__$abc9_flop'.
Successfully finished Verilog frontend.

3.42.10. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~117 debug messages>

3.42.11. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.12. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~2 debug messages>

3.42.13. Executing TECHMAP pass (map to technology primitives).

3.42.13.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.42.13.2. Continuing TECHMAP pass.
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
Using template $paramod\SB_LUT4\LUT_INIT=16'0110100110010110 for cells of type SB_LUT4.
Using template SB_CARRY for cells of type SB_CARRY.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
No more expansions possible.
<suppressed ~147 debug messages>

3.42.14. Executing OPT pass (performing simple optimizations).

3.42.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.
<suppressed ~4 debug messages>

3.42.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
<suppressed ~29 debug messages>
Removed a total of 12 cells.

3.42.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LCD..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.42.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LCD.
Performed a total of 0 changes.

3.42.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.42.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.42.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

3.42.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.42.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.42.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LCD..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.42.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LCD.
Performed a total of 0 changes.

3.42.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LCD'.
Removed a total of 0 cells.

3.42.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.42.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LCD..

3.42.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module LCD.

3.42.14.16. Finished OPT passes. (There is nothing left to do.)

3.42.15. Executing AIGMAP pass (map logic to AIG).
Module LCD: replaced 7 cells with 43 new cells, skipped 11 cells.
  replaced 2 cell types:
       2 $_OR_
       5 $_MUX_
  not replaced 3 cell types:
       8 $specify2
       1 $_NOT_
       2 $_AND_

3.42.16. Executing AIGMAP pass (map logic to AIG).
Module LCD: replaced 161 cells with 767 new cells, skipped 322 cells.
  replaced 3 cell types:
     120 $_OR_
      17 $_XOR_
      24 $_MUX_
  not replaced 10 cell types:
       1 $scopeinfo
      35 $_NOT_
      33 $_AND_
      18 SB_DFF
      47 SB_DFFE
      21 SB_DFFESR
       4 SB_DFFESS
      90 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000000010101
      48 $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1
      25 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000011001011

3.42.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.16.3. Executing XAIGER backend.
<suppressed ~101 debug messages>
Extracted 276 AND gates and 1176 wires from module `LCD' to a netlist network with 91 inputs and 133 outputs.

3.42.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

3.42.16.5. Executing ABC9.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     91/    133  and =     254  lev =   11 (0.51)  mem = 0.02 MB  box = 163  bb = 115
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     91/    133  and =     282  lev =    9 (0.40)  mem = 0.02 MB  ch =   31  box = 163  bb = 115
ABC: + &if -W 250 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   52. Obj =  136. Set =  564. CutMin = no
ABC: Node =     282.  Ch =    28.  Total mem =    0.16 MB. Peak cut mem =    0.02 MB.
ABC: P:  Del = 3063.00.  Ar =      89.0.  Edge =      299.  Cut =     1365.  T =     0.00 sec
ABC: P:  Del = 3063.00.  Ar =      88.0.  Edge =      299.  Cut =     1339.  T =     0.00 sec
ABC: P:  Del = 3063.00.  Ar =      82.0.  Edge =      284.  Cut =     1413.  T =     0.00 sec
ABC: F:  Del = 3063.00.  Ar =      63.0.  Edge =      227.  Cut =     1198.  T =     0.00 sec
ABC: A:  Del = 3063.00.  Ar =      63.0.  Edge =      218.  Cut =     1239.  T =     0.00 sec
ABC: A:  Del = 3063.00.  Ar =      63.0.  Edge =      218.  Cut =     1222.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =     91/    133  and =     220  lev =   11 (0.44)  mem = 0.02 MB  box = 163  bb = 115
ABC: Mapping (K=4)  :  lut =     60  edge =     209  lev =    4 (0.22)  Boxes are not in a topological order. Switching to level computation without boxes.
ABC: levB =   11  mem = 0.01 MB
ABC: LUT = 60 : 2=9 15.0 %  3=13 21.7 %  4=38 63.3 %  Ave = 3.48
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.02 seconds, total: 0.02 seconds

3.42.16.6. Executing AIGER frontend.
<suppressed ~460 debug messages>
Removed 320 unused cells and 1102 unused wires.

3.42.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:       66
ABC RESULTS:   $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 cells:       48
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:      133
Removing temp directory.

3.42.17. Executing TECHMAP pass (map to technology primitives).

3.42.17.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/abc9_unmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/abc9_unmap.v' to AST representation.
Generating RTLIL representation for module `\$__DFF_x__$abc9_flop'.
Generating RTLIL representation for module `\$__ABC9_SCC_BREAKER'.
Successfully finished Verilog frontend.

3.42.17.2. Continuing TECHMAP pass.
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
No more expansions possible.
<suppressed ~54 debug messages>

3.43. Executing ICE40_WRAPCARRY pass (wrap carries).

3.44. Executing TECHMAP pass (map to technology primitives).

3.44.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.44.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 22 unused cells and 1599 unused wires.

3.45. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      106
  1-LUT                6
  2-LUT               13
  3-LUT               49
  4-LUT               38
  with \SB_CARRY    (#0)   36
  with \SB_CARRY    (#1)   36

Eliminating LUTs.
Number of LUTs:      106
  1-LUT                6
  2-LUT               13
  3-LUT               49
  4-LUT               38
  with \SB_CARRY    (#0)   36
  with \SB_CARRY    (#1)   36

Combining LUTs.
Number of LUTs:      106
  1-LUT                6
  2-LUT               13
  3-LUT               49
  4-LUT               38
  with \SB_CARRY    (#0)   36
  with \SB_CARRY    (#1)   36

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~556 debug messages>

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.46.2. Continuing TECHMAP pass.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod$8d7a8d6e3356de09670738ba85f2c6b874f6b06d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod$1241d759e3df4cac11dc7c99c36b0d1b07f7a673\$lut for cells of type $lut.
Using template $paramod$7d35f3eb4056e6484203c99fe42cfcf1dfaba704\$lut for cells of type $lut.
Using template $paramod$fca001e3e0b52158a872e76e56c01ec10dfbb1de\$lut for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010000 for cells of type $lut.
Using template $paramod$b26fbfdb68e98cf016d61a8611b449e9f4a30f3c\$lut for cells of type $lut.
Using template $paramod$a15fd389a2f54cb7b94707b25934d226e68d9e2e\$lut for cells of type $lut.
Using template $paramod$47a8214374025465e226fa66bee690ff33268a25\$lut for cells of type $lut.
Using template $paramod$c28a8b7ce0535d090c4cfb52e9c74affd52b110c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111110 for cells of type $lut.
Using template $paramod$eb9cd29370eb44669a66182a973136ba0f2ae9c4\$lut for cells of type $lut.
Using template $paramod$1b851ff25add4903107d5043cf9cc34c42af2995\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod$332a399730bfc61adea04021a76b1c4e4030f37d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod$a5516fc31d1e552de2435200bb732b4d4ad63a9c\$lut for cells of type $lut.
Using template $paramod$f9813472aa48e533b3838c6f2316dc2e78c66111\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod$30305e55a780880b9c824fe3509a4d981acb0f2b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod$8e44661def013b6bf9fe6f8b049ef2c838d749f9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod$81a09b29405ac729c90d1334cda976367f4c6314\$lut for cells of type $lut.
Using template $paramod$1bf6e0c4a7bfb8ad3853aafca11ea74104e0558b\$lut for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod$b3728f9649605b1c2df81736f1c7eb609139e8f1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11011100 for cells of type $lut.
Using template $paramod$d2b2d45fba8d53e86fc78545746028998adc59bb\$lut for cells of type $lut.
Using template $paramod$9664b2f5fd61944d7798b30cde43b99ccda87303\$lut for cells of type $lut.
Using template $paramod$101238f3d8d49ab12a9b49a2f01cd503b26e9c61\$lut for cells of type $lut.
Using template $paramod$76b23f75ea05aae81c66ce6aedbb063ab25c5798\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001101 for cells of type $lut.
Using template $paramod$6e46ec5a196ba1a24b8e69ab094cadc07c13ac1f\$lut for cells of type $lut.
Using template $paramod$ecf29a55bdd87a65c7b6e3a7fdc932d42d120f8c\$lut for cells of type $lut.
Using template $paramod$b9cb5377324e0161db74cde85e1d95ea38f43f07\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~681 debug messages>
Removed 0 unused cells and 235 unused wires.

3.47. Executing AUTONAME pass.
Renamed 1569 objects in module LCD (36 iterations).
<suppressed ~367 debug messages>

3.48. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `LCD'. Setting top module to LCD.

3.48.1. Analyzing design hierarchy..
Top module:  \LCD

3.48.2. Analyzing design hierarchy..
Top module:  \LCD
Removed 0 unused modules.

3.49. Printing statistics.

=== LCD ===

   Number of wires:                150
   Number of wire bits:            297
   Number of public wires:         150
   Number of public wire bits:     297
   Number of ports:                 11
   Number of port bits:             11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                241
     $scopeinfo                      1
     SB_CARRY                       44
     SB_DFF                         18
     SB_DFFE                        47
     SB_DFFESR                      21
     SB_DFFESS                       4
     SB_LUT4                       106

3.50. Executing CHECK pass (checking for obvious problems).
Checking module LCD...
Found and reported 0 problems.

3.51. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: b9c42ac64e, CPU: user 0.49s system 0.04s, MEM: 30.01 MB peak
Yosys 0.48+47 (git sha1 cbb95cb51, g++ 14.2.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/home/Sebastian/.cache/yay/yosys-nightly/src=/usr/src/debug/yosys-nightly -flto=auto -fPIC -O3)
Time spent: 32% 23x read_verilog (0 sec), 12% 27x opt_clean (0 sec), ...
